<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Thoughts</title>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">
</head>
<body>
<img src="https://lh3.googleusercontent.com/-y6iiQ2wlR3IGcatdXWqqjyxVH6gqKopDHrkXusnzam7WphJ6WAGbE6lnh-dLke9lZIEYeihP0yGyGtaZJLiC_sktLwDA4svDJyd0sf1UlQk1LLreLz-OfXSIFUjl1x6BtVAZo18nyajcE7kP3EZPL9rHbu26ngj3WhmDk9mV95SOzClECOYaRkp7Pepdh5emkYLTHCOQpWX1uWYc1Utceu486OR0Y8xYLoQrlGlHybdTlcoC1KRSC8Btq98pE0GmBcBmtG-uuwx5mPQGIAo0wuCGIOIjyzPEmYJi3SMTFpTlnMLWWVR8E3fsPsunewkrKv8JhYPStv2eGuS8ycp3EW9jg3k-GCiM26WgGuZ1HQIqnovh8_2d1qy6tIvBiH9cjQgdJl48jMAdmPzkY25_BtK_9h93EsbA-k2c2jNGAOWx_8rk6jGIL4VVK95ZHQylc4iK99P8GgYQR2PUdkGe2MJdjN48obriGvh0Pih_OLqtBcmtAg6pq-JqMUblYCR0Ph1IYi4KT5DHIfC2_JACpq5pO5MVs7x5ZVAXBWbpLqz5vNGdyzm__pgMewN9G3OIZWMMTe59GAPLhaJ6nTURyuIz_BSXjUeN3zOFhcBD-XvoeE09xH2n3jf1ItWOV535fun46PZWCRrdM01MTGfxsbM7YwfSxhgtHkUcRg-7qclcND-r3OJK-5BXs-0dg=w1152-h532-no?authuser=0" alt="">
<div id="text"></div>
<style>
    body{
        font-family: 'Open Sans', sans-serif;
        letter-spacing: -0.4px;
        margin: 0;
        padding: 0;
    }
    img{
        min-height: 100vh;
        z-index: -1;
        position: absolute;
        opacity: 0.2;
        width: 100%;
    }
    span{
        font-size: 20px;
    }
    #text{
        /*color:#fff;*/
        padding: 20px;
        text-shadow: 0px 3px 2px rgba(0, 0, 0, 0.5);
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        line-height: 1.2;
    }
</style>
<script>
  var Base64 = {

    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

    // public method for encoding
    , encode: function (input)
    {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;

      input = Base64._utf8_encode(input);

      while (i < input.length)
      {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2))
        {
          enc3 = enc4 = 64;
        }
        else if (isNaN(chr3))
        {
          enc4 = 64;
        }

        output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
      } // Whend

      return output;
    } // End Function encode


    // public method for decoding
    ,decode: function (input)
    {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;

      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      while (i < input.length)
      {
        enc1 = this._keyStr.indexOf(input.charAt(i++));
        enc2 = this._keyStr.indexOf(input.charAt(i++));
        enc3 = this._keyStr.indexOf(input.charAt(i++));
        enc4 = this._keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64)
        {
          output = output + String.fromCharCode(chr2);
        }

        if (enc4 != 64)
        {
          output = output + String.fromCharCode(chr3);
        }

      } // Whend

      output = Base64._utf8_decode(output);

      return output;
    } // End Function decode


    // private method for UTF-8 encoding
    ,_utf8_encode: function (string)
    {
      var utftext = "";
      string = string.replace(/\r\n/g, "\n");

      for (var n = 0; n < string.length; n++)
      {
        var c = string.charCodeAt(n);

        if (c < 128)
        {
          utftext += String.fromCharCode(c);
        }
        else if ((c > 127) && (c < 2048))
        {
          utftext += String.fromCharCode((c >> 6) | 192);
          utftext += String.fromCharCode((c & 63) | 128);
        }
        else
        {
          utftext += String.fromCharCode((c >> 12) | 224);
          utftext += String.fromCharCode(((c >> 6) & 63) | 128);
          utftext += String.fromCharCode((c & 63) | 128);
        }

      } // Next n

      return utftext;
    } // End Function _utf8_encode

    // private method for UTF-8 decoding
    ,_utf8_decode: function (utftext)
    {
      var string = "";
      var i = 0;
      var c, c1, c2, c3;
      c = c1 = c2 = 0;

      while (i < utftext.length)
      {
        c = utftext.charCodeAt(i);

        if (c < 128)
        {
          string += String.fromCharCode(c);
          i++;
        }
        else if ((c > 191) && (c < 224))
        {
          c2 = utftext.charCodeAt(i + 1);
          string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
          i += 2;
        }
        else
        {
          c2 = utftext.charCodeAt(i + 1);
          c3 = utftext.charCodeAt(i + 2);
          string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
          i += 3;
        }

      } // Whend

      return string;
    } // End Function _utf8_decode

  }
  const Text = document.getElementById(`text`);
  fetch('/assets/design/text.txt').then(res => {
    res.text().then(r => {
      const arr = r.split(/[.!?:;]/).filter(r =>
          r.replace(/[()«»"—…]/gm, ``),
      ).map(r => r.trim());
      // console.log(arr);

      let sorted = {};
      arr.forEach(el => {
        let char = el[0] || null;
        if (!char) return;
        char = char.toUpperCase();
        if (!sorted[char]) sorted[char] = [];
        sorted[char].push(el);
      });

      // console.log(texts.map(e => Base64.encode(e)));

      const texts =(["0K8g0YLQtdCx0Y8g0LvRjtCx0LvRjg==",
      "0KHQv9Cw0YHQuNCx0L4g0LfQsCDRgtCy0L7RjiDQvdC10LbQvdC+0YHRgtGMLCDQtNC+0LHRgNC+0YLRgyDQuCDQt9Cw0LHQvtGC0YM=",
      "0JLRgdC1LCDRh9GC0L4g0LzQvdC1INC90YPQttC90L4g0LTQu9GPINGB0YfQsNGB0YLRjNGPIOKAkyDRjdGC0L4g0YLRiw==",
      "0K8g0L7Rh9C10L3RjCDRgdC60YPRh9Cw0Y4g0L/QviDRgtC10LHQtQ==",
      "0J3QsCDRgtC10LHRjyDQvdC10LLQvtC30LzQvtC20L3QviDRgdC10YDQtNC40YLRjNGB0Y8=",
      "0JIg0YLQstC+0LjRhSDQs9C70LDQt9Cw0YUg0LzQvtC20L3QviDRg9GC0L7QvdGD0YLRjA==",
      "INCS0YDQtdC80Y8g0YEg0YLQvtCx0L7QuSDQstGB0LXQs9C00LAg0LHQtdC20LjRgiDQvtGH0LXQvdGMINCx0YvRgdGC0YDQvg=="].map(e => Base64.decode(e)));
      const text = texts[randomInteger(0,texts.length-1)];
      for (const c in text) {
        const char = text[c].toUpperCase();
        if ([` `, `,`].includes(char)) {
          document.body.append(char);
          continue;
        }
        const count = sorted[char]?.length || 2;
        const randomNumber = randomInteger(1, count-1);
        let sentence = sorted[char] ? sorted[char][randomNumber] : char;

        const span = document.createElement("span");
        span.textContent = sentence[0].toUpperCase();
        Text.append(span);

        sentence = sentence.slice(1)+". ";
        Text.append(sentence);
        if (sorted[char]) sorted[char].splice(randomNumber, 1);
      }
    });
  });

  function randomInteger(min, max) {
    let rand = min - 0.5 + Math.random() * (max - min + 1);
    return Math.round(rand);
  }

</script>
</body>
</html>